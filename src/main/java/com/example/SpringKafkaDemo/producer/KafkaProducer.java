package com.example.SpringKafkaDemo.producer;

import com.example.SpringKafkaDemo.model.KafkaMessage;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;

@RestController
public class KafkaProducer {

    @Autowired
    private KafkaTemplate<String, String> kafkaTemplate;

    @PostMapping("/messages/send")
    public String sendMessage(@RequestBody KafkaMessage message) {

        String topic = message.getTopic();
        String data  = message.getData();

       HashMap<String, String> headers = message.getHeaders();


        ProducerRecord<String, String> producerRecord = new ProducerRecord<>(topic, data);
        for (String s : headers.keySet()) {
            if (s.equals("springDeserializerExceptionKey")) {
                String exceptData = headers.get(s);
                byte[] exceptHandler = KafkaProducer.hexStringtoBytes(exceptData);
                producerRecord.headers().add(s, exceptHandler);
                continue;
            }

            producerRecord.headers().add(s, headers.get(s).getBytes());
        }
        kafkaTemplate.send(producerRecord);
        String jsonString="{\"code\":\"200\", \"status\":\"success\"}";

        return jsonString;
    }


    private static byte[] hexStringtoBytes(String hexString) {

        byte[] excepetionMessage = new byte[hexString.length() / 2];
        for (int i = 0; i < excepetionMessage.length; i++) {
            excepetionMessage[i] = (byte) Integer.parseInt(hexString.substring(i * 2, i * 2 + 2), 16);

        }
        return excepetionMessage;
    }
}
